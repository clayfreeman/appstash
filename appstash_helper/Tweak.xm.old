%hook MIBundleContainer

+(MIContainer*) tempAppBundleContainerWithIdentifier: (NSString*) identifier
                error:                                (NSError**) err {
  %log;
  NSLog(@"TEMPORARY ========================================================");
  NSLog(@"Identifier: %@", identifier);
  MIContainer* retVal = %orig(identifier, err);
  NSLog(@"Error:      %@", *err);
  NSLog(@"Return:     %@", retVal);
  return retVal;
}

-(bool) makeContainerLiveReplacingContainer:(MIContainer*)       container
        reason:                             (unsigned long long) reason
        withError:                          (NSError**)          err {
  %log;
  NSLog(@"PRODUCTION ========================================================");
  NSLog(@"Container: %@",   container);
  NSLog(@"Reason:    %llu", reason);
  bool retVal = %orig(container, reason, err);
  NSLog(@"Error:     %@",   *err);
  NSLog(@"Return:    %@",   retVal ? @"YES" : @"NO");
  return retVal;
}

%end

%hook MICodeSigningVerifier

+(bool) _validateStubSignature:(id)arg1 withSigningID:(id)arg2
    error:(id *)arg3 {
  %log;
  return YES;
}

+(bool) _validateBundleExecutable:(id)arg1 againstStubAt:(id)arg2
    trustedHashes:(id)arg3 sectionName:(id)arg4 signingIdentifier:(id)arg5
    error:(id *)arg6 {
  %log;
  return YES;
}

+(bool) validateWatchKitV2StubExecutableBundle:(id)arg1 error:(id *)arg2 {
  %log;
  return YES;
}

+(bool) validateWatchKitV1StubExecutableBundle:(id)arg1 error:(id *)arg2 {
  %log;
  return YES;
}

+(NSDictionary*) _validateSignatureAndCopyInfoForURL: (NSURL*)        url
                 withOptions:                         (NSDictionary*) options
                 error:                               (NSError**)     err {
  NSLog(@"URL:     %@", url);
  NSLog(@"Options: %@", options);
  NSMutableDictionary* mutableRetVal = [NSMutableDictionary
    dictionaryWithDictionary:%orig(url, options, err)];
  // NSMutableDictionary* entitlements = [NSMutableDictionary
  //   dictionaryWithDictionary:[mutableRetVal objectForKey:@"Entitlements"]];
  // [entitlements
  //   setObject:@"28EJ9F446F.com.testing.TVRemote"
  //   forKey:   @"application-identifier"];
  // [mutableRetVal
  //   setObject:@"com.testing.TVRemote"
  //   forKey:   @"SigningID"];
  // [mutableRetVal
  //   setObject:[NSDictionary dictionaryWithDictionary:entitlements]
  //   forKey:   @"Entitlements"];
  NSDictionary* retVal = [NSDictionary dictionaryWithDictionary:mutableRetVal];
  NSLog(@"Error:   %@", *err);
  NSLog(@"Return:  %@", retVal);
	*err = nil;
  return retVal;
}

%hook MIExecutableBundle

-(MICodeSigningInfo*) codeSigningInfoByValidatingResources: (bool)      validate
                      performingOnlineAuthorization:        (bool)      online
                      ignoringCachedSigningInfo:            (bool)      ignore
                      error:                                (NSError**) err {
  MICodeSigningInfo* info = %orig(validate, online, ignore, err);
  %log(info);
  return info;
}

%end
